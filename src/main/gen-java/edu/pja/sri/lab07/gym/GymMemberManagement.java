/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.pja.sri.lab07.gym;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2024-06-21")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class GymMemberManagement {

  public interface Iface {

    public void addGymMember(GymMember gymMember) throws AlreadyExistsException, org.apache.thrift.TException;

    public GymMember getGymMember(int gymMemberId) throws GymMemberNotFoundException, org.apache.thrift.TException;

    public void updateGymMember(int gymMemberId, GymMember gymMember) throws GymMemberNotFoundException, org.apache.thrift.TException;

    public void deleteGymMember(int gymMemberId) throws GymMemberNotFoundException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addGymMember(GymMember gymMember, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getGymMember(int gymMemberId, org.apache.thrift.async.AsyncMethodCallback<GymMember> resultHandler) throws org.apache.thrift.TException;

    public void updateGymMember(int gymMemberId, GymMember gymMember, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void deleteGymMember(int gymMemberId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public void addGymMember(GymMember gymMember) throws AlreadyExistsException, org.apache.thrift.TException
    {
      send_addGymMember(gymMember);
      recv_addGymMember();
    }

    public void send_addGymMember(GymMember gymMember) throws org.apache.thrift.TException
    {
      addGymMember_args args = new addGymMember_args();
      args.setGymMember(gymMember);
      sendBase("addGymMember", args);
    }

    public void recv_addGymMember() throws AlreadyExistsException, org.apache.thrift.TException
    {
      addGymMember_result result = new addGymMember_result();
      receiveBase(result, "addGymMember");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    @Override
    public GymMember getGymMember(int gymMemberId) throws GymMemberNotFoundException, org.apache.thrift.TException
    {
      send_getGymMember(gymMemberId);
      return recv_getGymMember();
    }

    public void send_getGymMember(int gymMemberId) throws org.apache.thrift.TException
    {
      getGymMember_args args = new getGymMember_args();
      args.setGymMemberId(gymMemberId);
      sendBase("getGymMember", args);
    }

    public GymMember recv_getGymMember() throws GymMemberNotFoundException, org.apache.thrift.TException
    {
      getGymMember_result result = new getGymMember_result();
      receiveBase(result, "getGymMember");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGymMember failed: unknown result");
    }

    @Override
    public void updateGymMember(int gymMemberId, GymMember gymMember) throws GymMemberNotFoundException, org.apache.thrift.TException
    {
      send_updateGymMember(gymMemberId, gymMember);
      recv_updateGymMember();
    }

    public void send_updateGymMember(int gymMemberId, GymMember gymMember) throws org.apache.thrift.TException
    {
      updateGymMember_args args = new updateGymMember_args();
      args.setGymMemberId(gymMemberId);
      args.setGymMember(gymMember);
      sendBase("updateGymMember", args);
    }

    public void recv_updateGymMember() throws GymMemberNotFoundException, org.apache.thrift.TException
    {
      updateGymMember_result result = new updateGymMember_result();
      receiveBase(result, "updateGymMember");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    @Override
    public void deleteGymMember(int gymMemberId) throws GymMemberNotFoundException, org.apache.thrift.TException
    {
      send_deleteGymMember(gymMemberId);
      recv_deleteGymMember();
    }

    public void send_deleteGymMember(int gymMemberId) throws org.apache.thrift.TException
    {
      deleteGymMember_args args = new deleteGymMember_args();
      args.setGymMemberId(gymMemberId);
      sendBase("deleteGymMember", args);
    }

    public void recv_deleteGymMember() throws GymMemberNotFoundException, org.apache.thrift.TException
    {
      deleteGymMember_result result = new deleteGymMember_result();
      receiveBase(result, "deleteGymMember");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void addGymMember(GymMember gymMember, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addGymMember_call method_call = new addGymMember_call(gymMember, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addGymMember_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private GymMember gymMember;
      public addGymMember_call(GymMember gymMember, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gymMember = gymMember;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addGymMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addGymMember_args args = new addGymMember_args();
        args.setGymMember(gymMember);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws AlreadyExistsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addGymMember();
        return null;
      }
    }

    @Override
    public void getGymMember(int gymMemberId, org.apache.thrift.async.AsyncMethodCallback<GymMember> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGymMember_call method_call = new getGymMember_call(gymMemberId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGymMember_call extends org.apache.thrift.async.TAsyncMethodCall<GymMember> {
      private int gymMemberId;
      public getGymMember_call(int gymMemberId, org.apache.thrift.async.AsyncMethodCallback<GymMember> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gymMemberId = gymMemberId;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGymMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGymMember_args args = new getGymMember_args();
        args.setGymMemberId(gymMemberId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public GymMember getResult() throws GymMemberNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGymMember();
      }
    }

    @Override
    public void updateGymMember(int gymMemberId, GymMember gymMember, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateGymMember_call method_call = new updateGymMember_call(gymMemberId, gymMember, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateGymMember_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int gymMemberId;
      private GymMember gymMember;
      public updateGymMember_call(int gymMemberId, GymMember gymMember, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gymMemberId = gymMemberId;
        this.gymMember = gymMember;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateGymMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateGymMember_args args = new updateGymMember_args();
        args.setGymMemberId(gymMemberId);
        args.setGymMember(gymMember);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws GymMemberNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateGymMember();
        return null;
      }
    }

    @Override
    public void deleteGymMember(int gymMemberId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteGymMember_call method_call = new deleteGymMember_call(gymMemberId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteGymMember_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int gymMemberId;
      public deleteGymMember_call(int gymMemberId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gymMemberId = gymMemberId;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteGymMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteGymMember_args args = new deleteGymMember_args();
        args.setGymMemberId(gymMemberId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws GymMemberNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteGymMember();
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addGymMember", new addGymMember());
      processMap.put("getGymMember", new getGymMember());
      processMap.put("updateGymMember", new updateGymMember());
      processMap.put("deleteGymMember", new deleteGymMember());
      return processMap;
    }

    public static class addGymMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addGymMember_args> {
      public addGymMember() {
        super("addGymMember");
      }

      @Override
      public addGymMember_args getEmptyArgsInstance() {
        return new addGymMember_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public addGymMember_result getResult(I iface, addGymMember_args args) throws org.apache.thrift.TException {
        addGymMember_result result = new addGymMember_result();
        try {
          iface.addGymMember(args.gymMember);
        } catch (AlreadyExistsException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getGymMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGymMember_args> {
      public getGymMember() {
        super("getGymMember");
      }

      @Override
      public getGymMember_args getEmptyArgsInstance() {
        return new getGymMember_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getGymMember_result getResult(I iface, getGymMember_args args) throws org.apache.thrift.TException {
        getGymMember_result result = new getGymMember_result();
        try {
          result.success = iface.getGymMember(args.gymMemberId);
        } catch (GymMemberNotFoundException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class updateGymMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateGymMember_args> {
      public updateGymMember() {
        super("updateGymMember");
      }

      @Override
      public updateGymMember_args getEmptyArgsInstance() {
        return new updateGymMember_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public updateGymMember_result getResult(I iface, updateGymMember_args args) throws org.apache.thrift.TException {
        updateGymMember_result result = new updateGymMember_result();
        try {
          iface.updateGymMember(args.gymMemberId, args.gymMember);
        } catch (GymMemberNotFoundException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class deleteGymMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteGymMember_args> {
      public deleteGymMember() {
        super("deleteGymMember");
      }

      @Override
      public deleteGymMember_args getEmptyArgsInstance() {
        return new deleteGymMember_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public deleteGymMember_result getResult(I iface, deleteGymMember_args args) throws org.apache.thrift.TException {
        deleteGymMember_result result = new deleteGymMember_result();
        try {
          iface.deleteGymMember(args.gymMemberId);
        } catch (GymMemberNotFoundException err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addGymMember", new addGymMember());
      processMap.put("getGymMember", new getGymMember());
      processMap.put("updateGymMember", new updateGymMember());
      processMap.put("deleteGymMember", new deleteGymMember());
      return processMap;
    }

    public static class addGymMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addGymMember_args, Void> {
      public addGymMember() {
        super("addGymMember");
      }

      @Override
      public addGymMember_args getEmptyArgsInstance() {
        return new addGymMember_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            addGymMember_result result = new addGymMember_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addGymMember_result result = new addGymMember_result();
            if (e instanceof AlreadyExistsException) {
              result.err = (AlreadyExistsException) e;
              result.setErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, addGymMember_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addGymMember(args.gymMember,resultHandler);
      }
    }

    public static class getGymMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getGymMember_args, GymMember> {
      public getGymMember() {
        super("getGymMember");
      }

      @Override
      public getGymMember_args getEmptyArgsInstance() {
        return new getGymMember_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<GymMember> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<GymMember>() { 
          @Override
          public void onComplete(GymMember o) {
            getGymMember_result result = new getGymMember_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getGymMember_result result = new getGymMember_result();
            if (e instanceof GymMemberNotFoundException) {
              result.err = (GymMemberNotFoundException) e;
              result.setErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getGymMember_args args, org.apache.thrift.async.AsyncMethodCallback<GymMember> resultHandler) throws org.apache.thrift.TException {
        iface.getGymMember(args.gymMemberId,resultHandler);
      }
    }

    public static class updateGymMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateGymMember_args, Void> {
      public updateGymMember() {
        super("updateGymMember");
      }

      @Override
      public updateGymMember_args getEmptyArgsInstance() {
        return new updateGymMember_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            updateGymMember_result result = new updateGymMember_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateGymMember_result result = new updateGymMember_result();
            if (e instanceof GymMemberNotFoundException) {
              result.err = (GymMemberNotFoundException) e;
              result.setErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, updateGymMember_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.updateGymMember(args.gymMemberId, args.gymMember,resultHandler);
      }
    }

    public static class deleteGymMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteGymMember_args, Void> {
      public deleteGymMember() {
        super("deleteGymMember");
      }

      @Override
      public deleteGymMember_args getEmptyArgsInstance() {
        return new deleteGymMember_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            deleteGymMember_result result = new deleteGymMember_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteGymMember_result result = new deleteGymMember_result();
            if (e instanceof GymMemberNotFoundException) {
              result.err = (GymMemberNotFoundException) e;
              result.setErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, deleteGymMember_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteGymMember(args.gymMemberId,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class addGymMember_args implements org.apache.thrift.TBase<addGymMember_args, addGymMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<addGymMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGymMember_args");

    private static final org.apache.thrift.protocol.TField GYM_MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("gymMember", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addGymMember_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addGymMember_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable GymMember gymMember; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GYM_MEMBER((short)1, "gymMember");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GYM_MEMBER
            return GYM_MEMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GYM_MEMBER, new org.apache.thrift.meta_data.FieldMetaData("gymMember", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GymMember.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGymMember_args.class, metaDataMap);
    }

    public addGymMember_args() {
    }

    public addGymMember_args(
      GymMember gymMember)
    {
      this();
      this.gymMember = gymMember;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGymMember_args(addGymMember_args other) {
      if (other.isSetGymMember()) {
        this.gymMember = new GymMember(other.gymMember);
      }
    }

    @Override
    public addGymMember_args deepCopy() {
      return new addGymMember_args(this);
    }

    @Override
    public void clear() {
      this.gymMember = null;
    }

    @org.apache.thrift.annotation.Nullable
    public GymMember getGymMember() {
      return this.gymMember;
    }

    public addGymMember_args setGymMember(@org.apache.thrift.annotation.Nullable GymMember gymMember) {
      this.gymMember = gymMember;
      return this;
    }

    public void unsetGymMember() {
      this.gymMember = null;
    }

    /** Returns true if field gymMember is set (has been assigned a value) and false otherwise */
    public boolean isSetGymMember() {
      return this.gymMember != null;
    }

    public void setGymMemberIsSet(boolean value) {
      if (!value) {
        this.gymMember = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case GYM_MEMBER:
        if (value == null) {
          unsetGymMember();
        } else {
          setGymMember((GymMember)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case GYM_MEMBER:
        return getGymMember();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case GYM_MEMBER:
        return isSetGymMember();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addGymMember_args)
        return this.equals((addGymMember_args)that);
      return false;
    }

    public boolean equals(addGymMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_gymMember = true && this.isSetGymMember();
      boolean that_present_gymMember = true && that.isSetGymMember();
      if (this_present_gymMember || that_present_gymMember) {
        if (!(this_present_gymMember && that_present_gymMember))
          return false;
        if (!this.gymMember.equals(that.gymMember))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetGymMember()) ? 131071 : 524287);
      if (isSetGymMember())
        hashCode = hashCode * 8191 + gymMember.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addGymMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetGymMember(), other.isSetGymMember());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGymMember()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gymMember, other.gymMember);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addGymMember_args(");
      boolean first = true;

      sb.append("gymMember:");
      if (this.gymMember == null) {
        sb.append("null");
      } else {
        sb.append(this.gymMember);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (gymMember != null) {
        gymMember.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGymMember_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public addGymMember_argsStandardScheme getScheme() {
        return new addGymMember_argsStandardScheme();
      }
    }

    private static class addGymMember_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addGymMember_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, addGymMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GYM_MEMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.gymMember = new GymMember();
                struct.gymMember.read(iprot);
                struct.setGymMemberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, addGymMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gymMember != null) {
          oprot.writeFieldBegin(GYM_MEMBER_FIELD_DESC);
          struct.gymMember.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGymMember_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public addGymMember_argsTupleScheme getScheme() {
        return new addGymMember_argsTupleScheme();
      }
    }

    private static class addGymMember_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addGymMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGymMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGymMember()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGymMember()) {
          struct.gymMember.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGymMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.gymMember = new GymMember();
          struct.gymMember.read(iprot);
          struct.setGymMemberIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class addGymMember_result implements org.apache.thrift.TBase<addGymMember_result, addGymMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<addGymMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGymMember_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addGymMember_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addGymMember_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable AlreadyExistsException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AlreadyExistsException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGymMember_result.class, metaDataMap);
    }

    public addGymMember_result() {
    }

    public addGymMember_result(
      AlreadyExistsException err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGymMember_result(addGymMember_result other) {
      if (other.isSetErr()) {
        this.err = new AlreadyExistsException(other.err);
      }
    }

    @Override
    public addGymMember_result deepCopy() {
      return new addGymMember_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    @org.apache.thrift.annotation.Nullable
    public AlreadyExistsException getErr() {
      return this.err;
    }

    public addGymMember_result setErr(@org.apache.thrift.annotation.Nullable AlreadyExistsException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((AlreadyExistsException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addGymMember_result)
        return this.equals((addGymMember_result)that);
      return false;
    }

    public boolean equals(addGymMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
      if (isSetErr())
        hashCode = hashCode * 8191 + err.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addGymMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetErr(), other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addGymMember_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGymMember_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public addGymMember_resultStandardScheme getScheme() {
        return new addGymMember_resultStandardScheme();
      }
    }

    private static class addGymMember_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addGymMember_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, addGymMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new AlreadyExistsException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, addGymMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGymMember_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public addGymMember_resultTupleScheme getScheme() {
        return new addGymMember_resultTupleScheme();
      }
    }

    private static class addGymMember_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addGymMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGymMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGymMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new AlreadyExistsException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getGymMember_args implements org.apache.thrift.TBase<getGymMember_args, getGymMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<getGymMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGymMember_args");

    private static final org.apache.thrift.protocol.TField GYM_MEMBER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gymMemberId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getGymMember_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getGymMember_argsTupleSchemeFactory();

    public int gymMemberId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GYM_MEMBER_ID((short)1, "gymMemberId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GYM_MEMBER_ID
            return GYM_MEMBER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GYMMEMBERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GYM_MEMBER_ID, new org.apache.thrift.meta_data.FieldMetaData("gymMemberId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGymMember_args.class, metaDataMap);
    }

    public getGymMember_args() {
    }

    public getGymMember_args(
      int gymMemberId)
    {
      this();
      this.gymMemberId = gymMemberId;
      setGymMemberIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGymMember_args(getGymMember_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.gymMemberId = other.gymMemberId;
    }

    @Override
    public getGymMember_args deepCopy() {
      return new getGymMember_args(this);
    }

    @Override
    public void clear() {
      setGymMemberIdIsSet(false);
      this.gymMemberId = 0;
    }

    public int getGymMemberId() {
      return this.gymMemberId;
    }

    public getGymMember_args setGymMemberId(int gymMemberId) {
      this.gymMemberId = gymMemberId;
      setGymMemberIdIsSet(true);
      return this;
    }

    public void unsetGymMemberId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GYMMEMBERID_ISSET_ID);
    }

    /** Returns true if field gymMemberId is set (has been assigned a value) and false otherwise */
    public boolean isSetGymMemberId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GYMMEMBERID_ISSET_ID);
    }

    public void setGymMemberIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GYMMEMBERID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case GYM_MEMBER_ID:
        if (value == null) {
          unsetGymMemberId();
        } else {
          setGymMemberId((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case GYM_MEMBER_ID:
        return getGymMemberId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case GYM_MEMBER_ID:
        return isSetGymMemberId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getGymMember_args)
        return this.equals((getGymMember_args)that);
      return false;
    }

    public boolean equals(getGymMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_gymMemberId = true;
      boolean that_present_gymMemberId = true;
      if (this_present_gymMemberId || that_present_gymMemberId) {
        if (!(this_present_gymMemberId && that_present_gymMemberId))
          return false;
        if (this.gymMemberId != that.gymMemberId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + gymMemberId;

      return hashCode;
    }

    @Override
    public int compareTo(getGymMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetGymMemberId(), other.isSetGymMemberId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGymMemberId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gymMemberId, other.gymMemberId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getGymMember_args(");
      boolean first = true;

      sb.append("gymMemberId:");
      sb.append(this.gymMemberId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGymMember_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getGymMember_argsStandardScheme getScheme() {
        return new getGymMember_argsStandardScheme();
      }
    }

    private static class getGymMember_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getGymMember_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getGymMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GYM_MEMBER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.gymMemberId = iprot.readI32();
                struct.setGymMemberIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getGymMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GYM_MEMBER_ID_FIELD_DESC);
        oprot.writeI32(struct.gymMemberId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGymMember_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getGymMember_argsTupleScheme getScheme() {
        return new getGymMember_argsTupleScheme();
      }
    }

    private static class getGymMember_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getGymMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGymMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGymMemberId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGymMemberId()) {
          oprot.writeI32(struct.gymMemberId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGymMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.gymMemberId = iprot.readI32();
          struct.setGymMemberIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getGymMember_result implements org.apache.thrift.TBase<getGymMember_result, getGymMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<getGymMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGymMember_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getGymMember_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getGymMember_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable GymMember success; // required
    public @org.apache.thrift.annotation.Nullable GymMemberNotFoundException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GymMember.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GymMemberNotFoundException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGymMember_result.class, metaDataMap);
    }

    public getGymMember_result() {
    }

    public getGymMember_result(
      GymMember success,
      GymMemberNotFoundException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGymMember_result(getGymMember_result other) {
      if (other.isSetSuccess()) {
        this.success = new GymMember(other.success);
      }
      if (other.isSetErr()) {
        this.err = new GymMemberNotFoundException(other.err);
      }
    }

    @Override
    public getGymMember_result deepCopy() {
      return new getGymMember_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    @org.apache.thrift.annotation.Nullable
    public GymMember getSuccess() {
      return this.success;
    }

    public getGymMember_result setSuccess(@org.apache.thrift.annotation.Nullable GymMember success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public GymMemberNotFoundException getErr() {
      return this.err;
    }

    public getGymMember_result setErr(@org.apache.thrift.annotation.Nullable GymMemberNotFoundException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GymMember)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((GymMemberNotFoundException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getGymMember_result)
        return this.equals((getGymMember_result)that);
      return false;
    }

    public boolean equals(getGymMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
      if (isSetErr())
        hashCode = hashCode * 8191 + err.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getGymMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetErr(), other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getGymMember_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGymMember_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getGymMember_resultStandardScheme getScheme() {
        return new getGymMember_resultStandardScheme();
      }
    }

    private static class getGymMember_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getGymMember_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getGymMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GymMember();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new GymMemberNotFoundException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getGymMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGymMember_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getGymMember_resultTupleScheme getScheme() {
        return new getGymMember_resultTupleScheme();
      }
    }

    private static class getGymMember_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getGymMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGymMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGymMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new GymMember();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new GymMemberNotFoundException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class updateGymMember_args implements org.apache.thrift.TBase<updateGymMember_args, updateGymMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateGymMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGymMember_args");

    private static final org.apache.thrift.protocol.TField GYM_MEMBER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gymMemberId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField GYM_MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("gymMember", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateGymMember_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateGymMember_argsTupleSchemeFactory();

    public int gymMemberId; // required
    public @org.apache.thrift.annotation.Nullable GymMember gymMember; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GYM_MEMBER_ID((short)1, "gymMemberId"),
      GYM_MEMBER((short)2, "gymMember");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GYM_MEMBER_ID
            return GYM_MEMBER_ID;
          case 2: // GYM_MEMBER
            return GYM_MEMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GYMMEMBERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GYM_MEMBER_ID, new org.apache.thrift.meta_data.FieldMetaData("gymMemberId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GYM_MEMBER, new org.apache.thrift.meta_data.FieldMetaData("gymMember", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GymMember.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGymMember_args.class, metaDataMap);
    }

    public updateGymMember_args() {
    }

    public updateGymMember_args(
      int gymMemberId,
      GymMember gymMember)
    {
      this();
      this.gymMemberId = gymMemberId;
      setGymMemberIdIsSet(true);
      this.gymMember = gymMember;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGymMember_args(updateGymMember_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.gymMemberId = other.gymMemberId;
      if (other.isSetGymMember()) {
        this.gymMember = new GymMember(other.gymMember);
      }
    }

    @Override
    public updateGymMember_args deepCopy() {
      return new updateGymMember_args(this);
    }

    @Override
    public void clear() {
      setGymMemberIdIsSet(false);
      this.gymMemberId = 0;
      this.gymMember = null;
    }

    public int getGymMemberId() {
      return this.gymMemberId;
    }

    public updateGymMember_args setGymMemberId(int gymMemberId) {
      this.gymMemberId = gymMemberId;
      setGymMemberIdIsSet(true);
      return this;
    }

    public void unsetGymMemberId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GYMMEMBERID_ISSET_ID);
    }

    /** Returns true if field gymMemberId is set (has been assigned a value) and false otherwise */
    public boolean isSetGymMemberId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GYMMEMBERID_ISSET_ID);
    }

    public void setGymMemberIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GYMMEMBERID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public GymMember getGymMember() {
      return this.gymMember;
    }

    public updateGymMember_args setGymMember(@org.apache.thrift.annotation.Nullable GymMember gymMember) {
      this.gymMember = gymMember;
      return this;
    }

    public void unsetGymMember() {
      this.gymMember = null;
    }

    /** Returns true if field gymMember is set (has been assigned a value) and false otherwise */
    public boolean isSetGymMember() {
      return this.gymMember != null;
    }

    public void setGymMemberIsSet(boolean value) {
      if (!value) {
        this.gymMember = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case GYM_MEMBER_ID:
        if (value == null) {
          unsetGymMemberId();
        } else {
          setGymMemberId((java.lang.Integer)value);
        }
        break;

      case GYM_MEMBER:
        if (value == null) {
          unsetGymMember();
        } else {
          setGymMember((GymMember)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case GYM_MEMBER_ID:
        return getGymMemberId();

      case GYM_MEMBER:
        return getGymMember();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case GYM_MEMBER_ID:
        return isSetGymMemberId();
      case GYM_MEMBER:
        return isSetGymMember();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof updateGymMember_args)
        return this.equals((updateGymMember_args)that);
      return false;
    }

    public boolean equals(updateGymMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_gymMemberId = true;
      boolean that_present_gymMemberId = true;
      if (this_present_gymMemberId || that_present_gymMemberId) {
        if (!(this_present_gymMemberId && that_present_gymMemberId))
          return false;
        if (this.gymMemberId != that.gymMemberId)
          return false;
      }

      boolean this_present_gymMember = true && this.isSetGymMember();
      boolean that_present_gymMember = true && that.isSetGymMember();
      if (this_present_gymMember || that_present_gymMember) {
        if (!(this_present_gymMember && that_present_gymMember))
          return false;
        if (!this.gymMember.equals(that.gymMember))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + gymMemberId;

      hashCode = hashCode * 8191 + ((isSetGymMember()) ? 131071 : 524287);
      if (isSetGymMember())
        hashCode = hashCode * 8191 + gymMember.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateGymMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetGymMemberId(), other.isSetGymMemberId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGymMemberId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gymMemberId, other.gymMemberId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetGymMember(), other.isSetGymMember());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGymMember()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gymMember, other.gymMember);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateGymMember_args(");
      boolean first = true;

      sb.append("gymMemberId:");
      sb.append(this.gymMemberId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("gymMember:");
      if (this.gymMember == null) {
        sb.append("null");
      } else {
        sb.append(this.gymMember);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (gymMember != null) {
        gymMember.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGymMember_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public updateGymMember_argsStandardScheme getScheme() {
        return new updateGymMember_argsStandardScheme();
      }
    }

    private static class updateGymMember_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateGymMember_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGymMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GYM_MEMBER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.gymMemberId = iprot.readI32();
                struct.setGymMemberIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GYM_MEMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.gymMember = new GymMember();
                struct.gymMember.read(iprot);
                struct.setGymMemberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGymMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GYM_MEMBER_ID_FIELD_DESC);
        oprot.writeI32(struct.gymMemberId);
        oprot.writeFieldEnd();
        if (struct.gymMember != null) {
          oprot.writeFieldBegin(GYM_MEMBER_FIELD_DESC);
          struct.gymMember.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGymMember_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public updateGymMember_argsTupleScheme getScheme() {
        return new updateGymMember_argsTupleScheme();
      }
    }

    private static class updateGymMember_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateGymMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGymMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGymMemberId()) {
          optionals.set(0);
        }
        if (struct.isSetGymMember()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGymMemberId()) {
          oprot.writeI32(struct.gymMemberId);
        }
        if (struct.isSetGymMember()) {
          struct.gymMember.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGymMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.gymMemberId = iprot.readI32();
          struct.setGymMemberIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.gymMember = new GymMember();
          struct.gymMember.read(iprot);
          struct.setGymMemberIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class updateGymMember_result implements org.apache.thrift.TBase<updateGymMember_result, updateGymMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateGymMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGymMember_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateGymMember_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateGymMember_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable GymMemberNotFoundException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GymMemberNotFoundException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGymMember_result.class, metaDataMap);
    }

    public updateGymMember_result() {
    }

    public updateGymMember_result(
      GymMemberNotFoundException err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGymMember_result(updateGymMember_result other) {
      if (other.isSetErr()) {
        this.err = new GymMemberNotFoundException(other.err);
      }
    }

    @Override
    public updateGymMember_result deepCopy() {
      return new updateGymMember_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    @org.apache.thrift.annotation.Nullable
    public GymMemberNotFoundException getErr() {
      return this.err;
    }

    public updateGymMember_result setErr(@org.apache.thrift.annotation.Nullable GymMemberNotFoundException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((GymMemberNotFoundException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof updateGymMember_result)
        return this.equals((updateGymMember_result)that);
      return false;
    }

    public boolean equals(updateGymMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
      if (isSetErr())
        hashCode = hashCode * 8191 + err.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateGymMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetErr(), other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateGymMember_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGymMember_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public updateGymMember_resultStandardScheme getScheme() {
        return new updateGymMember_resultStandardScheme();
      }
    }

    private static class updateGymMember_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateGymMember_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGymMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new GymMemberNotFoundException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGymMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGymMember_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public updateGymMember_resultTupleScheme getScheme() {
        return new updateGymMember_resultTupleScheme();
      }
    }

    private static class updateGymMember_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateGymMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGymMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGymMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new GymMemberNotFoundException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class deleteGymMember_args implements org.apache.thrift.TBase<deleteGymMember_args, deleteGymMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteGymMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteGymMember_args");

    private static final org.apache.thrift.protocol.TField GYM_MEMBER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gymMemberId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteGymMember_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteGymMember_argsTupleSchemeFactory();

    public int gymMemberId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GYM_MEMBER_ID((short)1, "gymMemberId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GYM_MEMBER_ID
            return GYM_MEMBER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GYMMEMBERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GYM_MEMBER_ID, new org.apache.thrift.meta_data.FieldMetaData("gymMemberId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteGymMember_args.class, metaDataMap);
    }

    public deleteGymMember_args() {
    }

    public deleteGymMember_args(
      int gymMemberId)
    {
      this();
      this.gymMemberId = gymMemberId;
      setGymMemberIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteGymMember_args(deleteGymMember_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.gymMemberId = other.gymMemberId;
    }

    @Override
    public deleteGymMember_args deepCopy() {
      return new deleteGymMember_args(this);
    }

    @Override
    public void clear() {
      setGymMemberIdIsSet(false);
      this.gymMemberId = 0;
    }

    public int getGymMemberId() {
      return this.gymMemberId;
    }

    public deleteGymMember_args setGymMemberId(int gymMemberId) {
      this.gymMemberId = gymMemberId;
      setGymMemberIdIsSet(true);
      return this;
    }

    public void unsetGymMemberId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GYMMEMBERID_ISSET_ID);
    }

    /** Returns true if field gymMemberId is set (has been assigned a value) and false otherwise */
    public boolean isSetGymMemberId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GYMMEMBERID_ISSET_ID);
    }

    public void setGymMemberIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GYMMEMBERID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case GYM_MEMBER_ID:
        if (value == null) {
          unsetGymMemberId();
        } else {
          setGymMemberId((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case GYM_MEMBER_ID:
        return getGymMemberId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case GYM_MEMBER_ID:
        return isSetGymMemberId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof deleteGymMember_args)
        return this.equals((deleteGymMember_args)that);
      return false;
    }

    public boolean equals(deleteGymMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_gymMemberId = true;
      boolean that_present_gymMemberId = true;
      if (this_present_gymMemberId || that_present_gymMemberId) {
        if (!(this_present_gymMemberId && that_present_gymMemberId))
          return false;
        if (this.gymMemberId != that.gymMemberId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + gymMemberId;

      return hashCode;
    }

    @Override
    public int compareTo(deleteGymMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetGymMemberId(), other.isSetGymMemberId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGymMemberId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gymMemberId, other.gymMemberId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteGymMember_args(");
      boolean first = true;

      sb.append("gymMemberId:");
      sb.append(this.gymMemberId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteGymMember_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteGymMember_argsStandardScheme getScheme() {
        return new deleteGymMember_argsStandardScheme();
      }
    }

    private static class deleteGymMember_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteGymMember_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteGymMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GYM_MEMBER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.gymMemberId = iprot.readI32();
                struct.setGymMemberIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteGymMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GYM_MEMBER_ID_FIELD_DESC);
        oprot.writeI32(struct.gymMemberId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteGymMember_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteGymMember_argsTupleScheme getScheme() {
        return new deleteGymMember_argsTupleScheme();
      }
    }

    private static class deleteGymMember_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteGymMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteGymMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGymMemberId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGymMemberId()) {
          oprot.writeI32(struct.gymMemberId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteGymMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.gymMemberId = iprot.readI32();
          struct.setGymMemberIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class deleteGymMember_result implements org.apache.thrift.TBase<deleteGymMember_result, deleteGymMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteGymMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteGymMember_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteGymMember_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteGymMember_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable GymMemberNotFoundException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GymMemberNotFoundException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteGymMember_result.class, metaDataMap);
    }

    public deleteGymMember_result() {
    }

    public deleteGymMember_result(
      GymMemberNotFoundException err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteGymMember_result(deleteGymMember_result other) {
      if (other.isSetErr()) {
        this.err = new GymMemberNotFoundException(other.err);
      }
    }

    @Override
    public deleteGymMember_result deepCopy() {
      return new deleteGymMember_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    @org.apache.thrift.annotation.Nullable
    public GymMemberNotFoundException getErr() {
      return this.err;
    }

    public deleteGymMember_result setErr(@org.apache.thrift.annotation.Nullable GymMemberNotFoundException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((GymMemberNotFoundException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof deleteGymMember_result)
        return this.equals((deleteGymMember_result)that);
      return false;
    }

    public boolean equals(deleteGymMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
      if (isSetErr())
        hashCode = hashCode * 8191 + err.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteGymMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetErr(), other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteGymMember_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteGymMember_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteGymMember_resultStandardScheme getScheme() {
        return new deleteGymMember_resultStandardScheme();
      }
    }

    private static class deleteGymMember_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteGymMember_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteGymMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new GymMemberNotFoundException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteGymMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteGymMember_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteGymMember_resultTupleScheme getScheme() {
        return new deleteGymMember_resultTupleScheme();
      }
    }

    private static class deleteGymMember_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteGymMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteGymMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteGymMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new GymMemberNotFoundException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
